services:
  # telegram-download-daemon:
  #   container_name: telegram-download-daemon
  #   image: baruchiro/telegram-download-daemon
  #   environment:
  #     TELEGRAM_DAEMON_API_ID: ${TELEGRAM_DAEMON_API_ID}
  #     TELEGRAM_DAEMON_API_HASH: ${TELEGRAM_DAEMON_API_HASH}
  #     TELEGRAM_DAEMON_CHANNEL: ${TELEGRAM_TV_CHANNEL_ID}
  #     TELEGRAM_DAEMON_DEST: "/downloads"
  #     TELEGRAM_DAEMON_TEMP: "/telegram-temp"
  #     TELEGRAM_DAEMON_SESSION_PATH: "/session"
  #   volumes:
  #     - tv-shows:/downloads
  #     - sessions:/session
  #   restart: unless-stopped

  jellyfin:
    # port 8096
    container_name: jellyfin
    image: jellyfin/jellyfin
    restart: unless-stopped
    network_mode: host
    env_file:
      - shared.env
    volumes:
      - jellyfin:/config
      - jellyfin-cache:/cache
      - all-media:/media
      - tv-shows:/media/tv-shows
      - movies:/media/movies

  jackett:
    # port 9117
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    network_mode: host
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
      - AUTO_UPDATE=true
    volumes:
      - jackett:/config
      - downloads:/downloads
    restart: unless-stopped

  deluge:
    # port 8112
    image: ghcr.io/linuxserver/deluge:2.1.1
    container_name: deluge
    network_mode: host
    restart: unless-stopped
    env_file:
      - shared.env
    volumes:
      - deluge:/config
      - downloads:/downloads

  sonarr:
    # port 8989
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    network_mode: host
    depends_on:
      - jackett
      - deluge
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - tv-shows:/tv
      - sonarr:/config
      - downloads:/downloads
    restart: unless-stopped

  radarr:
    # port 7878
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    network_mode: host
    depends_on:
      - jackett
      - deluge
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - movies:/movies
      - radarr:/config
      - downloads:/downloads
    restart: unless-stopped

  bazarr:
    # port 6767
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
    network_mode: host
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - bazarr:/config
      - tv-shows:/tv
      - movies:/movies
    restart: unless-stopped

  portainer:
    # port 9000
    image: portainer/portainer-ce
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    env_file:
      - shared.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data

  homeassistant:
    # port 8123
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ./homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    env_file:
      - shared.env
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    privileged: true
    network_mode: host

  n8n:
    # port 5678
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n:latest
    network_mode: host
    env_file:
      - shared.env
    environment:
      - N8N_SECURE_COOKIE=false
    volumes:
        - n8n:/home/node/.n8n
  
  # code-server:
  #   # port 8443
  #   image: lscr.io/linuxserver/code-server:latest
  #   container_name: code-server
  #   privileged: true
  #   env_file:
  #     - shared.env
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     # - PASSWORD=password #optional
  #     # - HASHED_PASSWORD= #optional
  #     # - SUDO_PASSWORD=password #optional
  #     # - SUDO_PASSWORD_HASH= #optional
  #     - PROXY_DOMAIN=code.${DOMAIN} #optional
  #     - DEFAULT_WORKSPACE=/sources/home-server #optional
  #   volumes:
  #     - code-server:/config
  #     - ./:/sources/home-server
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - 8443:8443
  #   restart: unless-stopped

  nocodb: 
    depends_on: 
      nocodb_mysql: 
        condition: service_healthy
    environment: 
      NC_DB: "mysql2://nocodb_mysql:3306?u=noco&p=password&d=root_db"
    image: "nocodb/nocodb:latest"
    ports:
      - "8765:8080"
    restart: always
    volumes: 
      - "nocodb_data:/usr/app/data"
  
  nocodb_mysql: 
    environment: 
      MYSQL_DATABASE: root_db
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: noco
    healthcheck: 
      retries: 10
      test: 
        - CMD
        - mysqladmin
        - ping
        - "-h"
        - localhost
      timeout: 20s
    image: "mysql:8.3.0"
    restart: always
    volumes: 
      - "nocodb_mysql_data:/var/lib/mysql"
#    below line shows how to change charset and collation
#    uncomment it if necessary
#    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  ofelia:
    image: mcuadros/ofelia:latest
    depends_on:
      - paperless-web
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      ofelia.job-local.my-test-job.schedule: "@every 5s"
      ofelia.job-local.my-test-job.command: "date"

  # Docker Compose file for running paperless from the docker container registry.
  # This file contains everything paperless needs to run.
  # Paperless supports amd64, arm and arm64 hardware.
  # All compose files of paperless configure paperless in the following way:
  #
  # - Paperless is (re)started on system boot, if it was running before shutdown.
  # - Docker volumes for storing data are managed by Docker.
  # - Folders for importing and exporting files are created in the same directory
  #   as this file and mounted to the correct folders inside the container.
  # - Paperless listens on port 8000.
  #
  # SQLite is used as the database. The SQLite file is stored in the data volume.
  #
  # In addition to that, this Docker Compose file adds the following optional
  # configurations:
  #
  # - Apache Tika and Gotenberg servers are started with paperless and paperless
  #   is configured to use these services. These provide support for consuming
  #   Office documents (Word, Excel, Power Point and their LibreOffice counter-
  #   parts.
  #
  # To install and update paperless with this file, do the following:
  #
  # - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
  #   and '.env' into a folder.
  # - Run 'docker compose pull'.
  # - Run 'docker compose run --rm paperless-web createsuperuser' to create a user.
  # - Run 'docker compose up -d'.
  #
  # For more extensive installation and update instructions, refer to the
  # documentation.
  paperless-broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - paperless-redisdata:/data

  paperless-web:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - paperless-broker
      - paperless-gotenberg
      - paperless-tika
    ports:
      - "3355:8000"
    volumes:
      - paperless-data:/usr/src/paperless/data
      - paperless-media:/usr/src/paperless/media
      - paperless-export:/usr/src/paperless/export
      - paperless-consume:/usr/src/paperless/consume
      - ./paperless/scripts:/usr/src/paperless/scripts
    env_file: paperless.env
    environment:
      PAPERLESS_REDIS: redis://paperless-broker:6379
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://paperless-tika:9998
      PAPERLESS_URL: https://paperless.${DOMAIN}
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.datecron.schedule: "@every 12h"
      ofelia.job-exec.datecron.command: "document_exporter ../export --delete --no-archive --no-thumbnail --use-folder-prefix --split-manifest"

  paperless-gotenberg:
    image: docker.io/gotenberg/gotenberg:7.10
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  paperless-tika:
    image: ghcr.io/paperless-ngx/tika:latest
    restart: unless-stopped

  obsidian-livesync:
    image: couchdb
    container_name: obsidian-livesync
    user: 1000:1000
    environment:
      - COUCHDB_USER=${OBSIDIAN_COUCHDB_USER} # enter the desired CouchDB admin username
      - COUCHDB_PASSWORD=${OBSIDIAN_COUCHDB_PASSWORD} # enter the desired CouchDB admin password
    volumes:
      - obsidian-data:/opt/couchdb/data
      - ./obsidian/local.ini:/opt/couchdb/etc/local.ini
    ports:
      - 5984:5984
    restart: unless-stopped

volumes:
  sessions:
  all-media:
  tv-shows:
  movies:
  downloads:

  nocodb_mysql_data:
  nocodb_data:

  obsidian-data:

  # Configs
  jellyfin:
  jellyfin-cache:
  jackett:
  deluge:
  sonarr:
  radarr:
  bazarr:
  portainer:
  n8n:

  paperless-redisdata:
  paperless-data:
  paperless-media:
  paperless-export:
    driver: rclone
    driver_opts:
      remote: 'remote-gdrive:paperless'
      allow_other: 'true'
      vfs_cache_mode: full
      poll_interval: 0
  paperless-consume:

    # telegram2twitter:
    #   image: baruchiro/telegram2twitter
    #   container_name: telegram2twitter
    #   network_mode: host
    #   environment:
    #     TELEGRAM_TWITTER_CONSUMER_KEY: ${TELEGRAM_TWITTER_CONSUMER_KEY}
    #     TELEGRAM_TWITTER_CONSUMER_SECRET: ${TELEGRAM_TWITTER_CONSUMER_SECRET}
    #     TELEGRAM_TWITTER_ACCESS_TOKEN: ${TELEGRAM_TWITTER_ACCESS_TOKEN}
    #     TELEGRAM_TWITTER_TOKEN_SECRET: ${TELEGRAM_TWITTER_TOKEN_SECRET}
    #     TELEGRAM_TWITTER_BOT_TOKEN: ${TELEGRAM_TWITTER_BOT_TOKEN}
    #     TELEGRAM_TWITTER_USER_ID: ${TELEGRAM_TWITTER_USER_ID}
    #     INTERFACE_NAME: wlan0
    #   restart: unless-stopped

    # node-red:
    #   # port 1880
    #   # Dev: docker run -p 1880:1880 -v $(pwd)/node-red:/data --entrypoint="" --env-file .env nodered/node-red /bin/sh -c "npm install --prefix /data --unsafe-perm --no-update-notifier --no-fund --only=production && npm --no-update-notifier --no-fund start --cache /data/.npm -- --userDir /data"
    #   image: nodered/node-red
    #   env_file:
    #     - shared.env
    #   network_mode: host
    #   entrypoint: >
    #     sh -c " npm install --prefix /data --unsafe-perm --no-update-notifier --no-fund --only=production && npm --no-update-notifier --no-fund start --cache /data/.npm -- --userDir /data"
    #   environment:
    #     NODE_RED_CREDENTIAL_SECRET: ${NODE_RED_CREDENTIAL_SECRET}
    #   volumes:
    #     - ./node-red:/data
    #   restart: unless-stopped


