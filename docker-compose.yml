version: '3'
services:
  # telegram-download-daemon:
  #   container_name: telegram-download-daemon
  #   image: baruchiro/telegram-download-daemon
  #   environment:
  #     TELEGRAM_DAEMON_API_ID: ${TELEGRAM_DAEMON_API_ID}
  #     TELEGRAM_DAEMON_API_HASH: ${TELEGRAM_DAEMON_API_HASH}
  #     TELEGRAM_DAEMON_CHANNEL: ${TELEGRAM_TV_CHANNEL_ID}
  #     TELEGRAM_DAEMON_DEST: "/downloads"
  #     TELEGRAM_DAEMON_TEMP: "/telegram-temp"
  #     TELEGRAM_DAEMON_SESSION_PATH: "/session"
  #   volumes:
  #     - tv-shows:/downloads
  #     - sessions:/session
  #   restart: unless-stopped

  jellyfin:
    # port 8096
    container_name: jellyfin
    image: jellyfin/jellyfin
    restart: unless-stopped
    network_mode: host
    env_file:
      - shared.env
    volumes:
      - jellyfin:/config
      - jellyfin-cache:/cache
      - all-media:/media
      - tv-shows:/media/tv-shows
      - movies:/media/movies
      - downloads:/media/downloads

  jackett:
    # port 9117
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    network_mode: host
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
      - AUTO_UPDATE=true
    volumes:
      - jackett:/config
      - downloads:/downloads
    restart: unless-stopped

  deluge:
    # port 8112
    image: ghcr.io/linuxserver/deluge:2.1.1
    container_name: deluge
    network_mode: host
    restart: unless-stopped
    env_file:
      - shared.env
    volumes:
      - deluge:/config
      - downloads:/downloads

  sonarr:
    # port 8989
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    network_mode: host
    depends_on:
      - jackett
      - deluge
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - tv-shows:/tv
      - sonarr:/config
      - downloads:/downloads
    restart: unless-stopped

  radarr:
    # port 7878
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    network_mode: host
    depends_on:
      - jackett
      - deluge
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - movies:/movies
      - radarr:/config
      - downloads:/downloads
    restart: unless-stopped

  bazarr:
    # port 6767
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
    network_mode: host
    env_file:
      - shared.env
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - bazarr:/config
      - tv-shows:/tv
      - movies:/movies
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    env_file:
      - shared.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer:/data

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ./homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    env_file:
      - shared.env
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    privileged: true
    network_mode: host

  tunnel:
    container_name: cloudflared-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    env_file:
      - shared.env
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    network_mode: host

volumes:
  sessions:
  all-media:
  tv-shows:
  movies:
  downloads:

  # Configs
  jellyfin:
  jellyfin-cache:
  jackett:
  deluge:
  sonarr:
  radarr:
  bazarr:
  portainer:

    # telegram2twitter:
    #   image: baruchiro/telegram2twitter
    #   container_name: telegram2twitter
    #   network_mode: host
    #   environment:
    #     TELEGRAM_TWITTER_CONSUMER_KEY: ${TELEGRAM_TWITTER_CONSUMER_KEY}
    #     TELEGRAM_TWITTER_CONSUMER_SECRET: ${TELEGRAM_TWITTER_CONSUMER_SECRET}
    #     TELEGRAM_TWITTER_ACCESS_TOKEN: ${TELEGRAM_TWITTER_ACCESS_TOKEN}
    #     TELEGRAM_TWITTER_TOKEN_SECRET: ${TELEGRAM_TWITTER_TOKEN_SECRET}
    #     TELEGRAM_TWITTER_BOT_TOKEN: ${TELEGRAM_TWITTER_BOT_TOKEN}
    #     TELEGRAM_TWITTER_USER_ID: ${TELEGRAM_TWITTER_USER_ID}
    #     INTERFACE_NAME: wlan0
    #   restart: unless-stopped

    # node-red:
    #   # port 1880
    #   # Dev: docker run -p 1880:1880 -v $(pwd)/node-red:/data --entrypoint="" --env-file .env nodered/node-red /bin/sh -c "npm install --prefix /data --unsafe-perm --no-update-notifier --no-fund --only=production && npm --no-update-notifier --no-fund start --cache /data/.npm -- --userDir /data"
    #   image: nodered/node-red
    #   env_file:
    #     - shared.env
    #   network_mode: host
    #   entrypoint: >
    #     sh -c " npm install --prefix /data --unsafe-perm --no-update-notifier --no-fund --only=production && npm --no-update-notifier --no-fund start --cache /data/.npm -- --userDir /data"
    #   environment:
    #     NODE_RED_CREDENTIAL_SECRET: ${NODE_RED_CREDENTIAL_SECRET}
    #   volumes:
    #     - ./node-red:/data
    #   restart: unless-stopped


