services:
  mysql:
    image: mysql:8
    env_file:
      - shared.env
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    healthcheck:
      retries: 10
      test:
        - CMD
        - mysqladmin
        - ping
        - "-h"
        - localhost
      timeout: 20s
    restart: always
    entrypoint: sh -c " echo 'CREATE DATABASE IF NOT EXISTS personal;' > /docker-entrypoint-initdb.d/0-init.sql; echo 'GRANT ALL PRIVILEGES ON personal.* TO \"${MYSQL_USER}\"@\"%\";' >> /docker-entrypoint-initdb.d/0-init.sql; echo 'FLUSH PRIVILEGES;' >> /docker-entrypoint-initdb.d/0-init.sql; /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci "
    volumes:
      - mysql:/var/lib/mysql
      - mysql-backup:/var/lib/backup
      - ./mysql/scripts:/var/lib/scripts
    ports:
      - "3306:3306"
    networks:
      - infra_net
    labels:
      ofelia.enabled: "true"
      ofelia.job-exec.backup-personal.schedule: "@daily"
      ofelia.job-exec.backup-personal.command: "sh -c '/var/lib/scripts/backup-personal.sh /var/lib/backup'"

  node-red:
    image: nodered/node-red
    env_file:
      - shared.env
    ports:
      - "1880:1880"
    entrypoint: >
      sh -c " npm install --prefix /data --unsafe-perm --no-update-notifier --no-fund --only=production && npm --no-update-notifier --no-fund start --cache /data/.npm -- --userDir /data"
    environment:
      NODE_RED_CREDENTIAL_SECRET: ${NODE_RED_CREDENTIAL_SECRET}
    volumes:
      - ./node-red:/data
    restart: unless-stopped
    networks:
      - infra_net
  
  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=n8n.${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://n8n.${DOMAIN}/
      - GENERIC_TIMEZONE=Asia/Jerusalem
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - infra_net

  obsidian-livesync:
    image: couchdb
    container_name: obsidian-livesync
    user: 1000:1000
    environment:
      - COUCHDB_USER=${OBSIDIAN_COUCHDB_USER}
      - COUCHDB_PASSWORD=${OBSIDIAN_COUCHDB_PASSWORD}
    volumes:
      - obsidian-data:/opt/couchdb/data
      - couchdb-etc:/opt/couchdb/etc/local.d
      - ./obsidian/local.ini:/opt/couchdb/etc/local.ini
    ports:
      - "5984:5984"
    restart: unless-stopped
    networks:
      - infra_net

  postgres:
    image: postgres:17-alpine
    env_file:
      - shared.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - infra_net
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER}
      interval: 10s
      timeout: 3s
      retries: 3

  redis:
    image: redis:7.2
    networks:
      - infra_net
    volumes:
      - redis-data:/data
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 3s
      retries: 3

  postiz:
    image: ghcr.io/gitroomhq/postiz-app:latest
    restart: always
    env_file:
      - shared.env
      - postiz.env
    environment:
      MAIN_URL: "https://postiz.${DOMAIN}"
      FRONTEND_URL: "https://postiz.${DOMAIN}"
      NEXT_PUBLIC_BACKEND_URL: "https://postiz.${DOMAIN}/api"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postiz"
      REDIS_URL: "redis://redis:6379"
      BACKEND_INTERNAL_URL: "http://localhost:3000"
      IS_GENERAL: "true"
      DISABLE_REGISTRATION: "true"
      STORAGE_PROVIDER: "local"
      UPLOAD_DIRECTORY: "/uploads"
      NEXT_PUBLIC_UPLOAD_DIRECTORY: "/uploads"
      # https://github.com/yagop/node-telegram-bot-api/blob/master/doc/usage.md#file-options-metadata
      NTBA_FIX_350: 1
    volumes:
      - postiz-config:/config/
      - postiz-uploads:/uploads/
    ports:
      - "5000:5000"
    networks:
      - infra_net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

networks:
  infra_net:
    name: infrastructure_network
    driver: bridge

volumes:
  mysql:
  mysql-backup:
    driver: rclone
    driver_opts:
      remote: 'remote-gdrive:mysql-backup'
      allow_other: 'true'
      vfs_cache_mode: full
      poll_interval: 0
  obsidian-data:
  couchdb-etc:
  n8n-data:
  postgres-data:
  redis-data:
  postiz-config:
  postiz-uploads: